
task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004984  08004984  00005984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a18  08004a18  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004a18  08004a18  00005a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a20  08004a20  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a20  08004a20  00005a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a24  08004a24  00005a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004a28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08004a38  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08004a38  000069d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001288c  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d07  00000000  00000000  000188cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d86  00000000  00000000  0001c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b7e  00000000  00000000  0001d4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001294c  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d4f  00000000  00000000  000329b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a0  00000000  00000000  000c774c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000cc0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800496c 	.word	0x0800496c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800496c 	.word	0x0800496c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa60 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f824 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f88c 	bl	80005f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f001 fc88 	bl	8001df4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GreenLedTask */
  GreenLedTaskHandle = osThreadNew(FlashGreenLedTask, NULL, &GreenLedTask_attributes);
 80004e4:	4a09      	ldr	r2, [pc, #36]	@ (800050c <main+0x3c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4809      	ldr	r0, [pc, #36]	@ (8000510 <main+0x40>)
 80004ea:	f001 fccd 	bl	8001e88 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a08      	ldr	r2, [pc, #32]	@ (8000514 <main+0x44>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of RedLedTask */
  RedLedTaskHandle = osThreadNew(FlashRedLedTask, NULL, &RedLedTask_attributes);
 80004f4:	4a08      	ldr	r2, [pc, #32]	@ (8000518 <main+0x48>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <main+0x4c>)
 80004fa:	f001 fcc5 	bl	8001e88 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <main+0x50>)
 8000502:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000504:	f001 fc9a 	bl	8001e3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0x38>
 800050c:	080049b8 	.word	0x080049b8
 8000510:	08000699 	.word	0x08000699
 8000514:	2000002c 	.word	0x2000002c
 8000518:	080049dc 	.word	0x080049dc
 800051c:	080006f9 	.word	0x080006f9
 8000520:	20000030 	.word	0x20000030

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 f9e0 	bl	80048f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	@ (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000598:	2319      	movs	r3, #25
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800059c:	23a8      	movs	r3, #168	@ 0xa8
 800059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fcf3 	bl	8000f98 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 f8dd 	bl	8000776 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ff55 	bl	8001488 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 f8c7 	bl	8000776 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0x98>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_GPIO_Init+0x98>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0x98>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2178      	movs	r1, #120	@ 0x78
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0x9c>)
 8000668:	f000 fc62 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin LED_RED_Pin LED_ORANGE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_ORANGE_Pin;
 800066c:	2378      	movs	r3, #120	@ 0x78
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0x9c>)
 8000684:	f000 fad0 	bl	8000c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000

08000698 <FlashGreenLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FlashGreenLedTask */
void FlashGreenLedTask(void *argument)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2140      	movs	r1, #64	@ 0x40
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <FlashGreenLedTask+0x5c>)
 80006a6:	f000 fc43 	bl	8000f30 <HAL_GPIO_WritePin>
	// 4 second
	for (int i = 0; i < 160; ++i)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e00e      	b.n	80006ce <FlashGreenLedTask+0x36>
	{
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <FlashGreenLedTask+0x5c>)
 80006b6:	f000 fc3b 	bl	8000f30 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006ba:	2108      	movs	r1, #8
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <FlashGreenLedTask+0x5c>)
 80006be:	f000 fc50 	bl	8000f62 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 80006c2:	2019      	movs	r0, #25
 80006c4:	f000 f9aa 	bl	8000a1c <HAL_Delay>
	for (int i = 0; i < 160; ++i)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3301      	adds	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2b9f      	cmp	r3, #159	@ 0x9f
 80006d2:	dded      	ble.n	80006b0 <FlashGreenLedTask+0x18>
	}

	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2108      	movs	r1, #8
 80006d8:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <FlashGreenLedTask+0x5c>)
 80006da:	f000 fc29 	bl	8000f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <FlashGreenLedTask+0x5c>)
 80006e4:	f000 fc24 	bl	8000f30 <HAL_GPIO_WritePin>

    osDelay(6000);
 80006e8:	f241 7070 	movw	r0, #6000	@ 0x1770
 80006ec:	f001 fc5e 	bl	8001fac <osDelay>
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, RESET);
 80006f0:	e7d6      	b.n	80006a0 <FlashGreenLedTask+0x8>
 80006f2:	bf00      	nop
 80006f4:	40020000 	.word	0x40020000

080006f8 <FlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashRedLedTask */
void FlashRedLedTask(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashRedLedTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2110      	movs	r1, #16
 8000704:	4813      	ldr	r0, [pc, #76]	@ (8000754 <FlashRedLedTask+0x5c>)
 8000706:	f000 fc13 	bl	8000f30 <HAL_GPIO_WritePin>

	for (int i = 0; i < 20; ++i)
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e00e      	b.n	800072e <FlashRedLedTask+0x36>
	{
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2140      	movs	r1, #64	@ 0x40
 8000714:	480f      	ldr	r0, [pc, #60]	@ (8000754 <FlashRedLedTask+0x5c>)
 8000716:	f000 fc0b 	bl	8000f30 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800071a:	2120      	movs	r1, #32
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <FlashRedLedTask+0x5c>)
 800071e:	f000 fc20 	bl	8000f62 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 8000722:	2019      	movs	r0, #25
 8000724:	f000 f97a 	bl	8000a1c <HAL_Delay>
	for (int i = 0; i < 20; ++i)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b13      	cmp	r3, #19
 8000732:	dded      	ble.n	8000710 <FlashRedLedTask+0x18>
	}

	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	4806      	ldr	r0, [pc, #24]	@ (8000754 <FlashRedLedTask+0x5c>)
 800073a:	f000 fbf9 	bl	8000f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	@ 0x40
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <FlashRedLedTask+0x5c>)
 8000744:	f000 fbf4 	bl	8000f30 <HAL_GPIO_WritePin>

	osDelay(1500);
 8000748:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800074c:	f001 fc2e 	bl	8001fac <osDelay>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000750:	e7d6      	b.n	8000700 <FlashRedLedTask+0x8>
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f937 	bl	80009dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_MspInit+0x54>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fa03 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <HAL_InitTick+0xe8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a33      	ldr	r2, [pc, #204]	@ (80008c4 <HAL_InitTick+0xe8>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <HAL_InitTick+0xe8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000808:	f107 0210 	add.w	r2, r7, #16
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f804 	bl	8001820 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800081c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800081e:	2b00      	cmp	r3, #0
 8000820:	d103      	bne.n	800082a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000822:	f000 ffe9 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8000826:	6378      	str	r0, [r7, #52]	@ 0x34
 8000828:	e004      	b.n	8000834 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800082a:	f000 ffe5 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 800082e:	4603      	mov	r3, r0
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000836:	4a24      	ldr	r2, [pc, #144]	@ (80008c8 <HAL_InitTick+0xec>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0c9b      	lsrs	r3, r3, #18
 800083e:	3b01      	subs	r3, #1
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000842:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <HAL_InitTick+0xf0>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <HAL_InitTick+0xf0>)
 800084c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000850:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000852:	4a1e      	ldr	r2, [pc, #120]	@ (80008cc <HAL_InitTick+0xf0>)
 8000854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000856:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <HAL_InitTick+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <HAL_InitTick+0xf0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <HAL_InitTick+0xf0>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800086a:	4818      	ldr	r0, [pc, #96]	@ (80008cc <HAL_InitTick+0xf0>)
 800086c:	f001 f80a 	bl	8001884 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000876:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800087a:	2b00      	cmp	r3, #0
 800087c:	d11b      	bne.n	80008b6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800087e:	4813      	ldr	r0, [pc, #76]	@ (80008cc <HAL_InitTick+0xf0>)
 8000880:	f001 f85a 	bl	8001938 <HAL_TIM_Base_Start_IT>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800088a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800088e:	2b00      	cmp	r3, #0
 8000890:	d111      	bne.n	80008b6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000892:	201c      	movs	r0, #28
 8000894:	f000 f9ba 	bl	8000c0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d808      	bhi.n	80008b0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800089e:	2200      	movs	r2, #0
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	201c      	movs	r0, #28
 80008a4:	f000 f996 	bl	8000bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a8:	4a09      	ldr	r2, [pc, #36]	@ (80008d0 <HAL_InitTick+0xf4>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e002      	b.n	80008b6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3738      	adds	r7, #56	@ 0x38
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	431bde83 	.word	0x431bde83
 80008cc:	20000034 	.word	0x20000034
 80008d0:	20000004 	.word	0x20000004

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <TIM2_IRQHandler+0x10>)
 8000912:	f001 f873 	bl	80019fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000034 	.word	0x20000034

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800097c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f003 ffc9 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdab 	bl	80004d0 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000988:	08004a28 	.word	0x08004a28
  ldr r2, =_sbss
 800098c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000990:	200049d0 	.word	0x200049d0

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f8fc 	bl	8000bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f7ff ff08 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff feda 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	2000007c 	.word	0x2000007c

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2000007c 	.word	0x2000007c

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff4c 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be6:	f7ff ff61 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f7ff ffb1 	bl	8000b58 <NVIC_EncodePriority>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff80 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff54 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e159      	b.n	8000ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 8148 	bne.w	8000ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80a2 	beq.w	8000ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b57      	ldr	r3, [pc, #348]	@ (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a56      	ldr	r2, [pc, #344]	@ (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dbe:	4b54      	ldr	r3, [pc, #336]	@ (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a52      	ldr	r2, [pc, #328]	@ (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a49      	ldr	r2, [pc, #292]	@ (8000f18 <HAL_GPIO_Init+0x2f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x202>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a48      	ldr	r2, [pc, #288]	@ (8000f1c <HAL_GPIO_Init+0x2f4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1fe>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a47      	ldr	r2, [pc, #284]	@ (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1fa>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a46      	ldr	r2, [pc, #280]	@ (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a45      	ldr	r2, [pc, #276]	@ (8000f28 <HAL_GPIO_Init+0x300>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1f2>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e008      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e004      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	f002 0203 	and.w	r2, r2, #3
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4093      	lsls	r3, r2
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e3c:	4935      	ldr	r1, [pc, #212]	@ (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b38      	ldr	r3, [pc, #224]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e98:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eec:	4a0f      	ldr	r2, [pc, #60]	@ (8000f2c <HAL_GPIO_Init+0x304>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	f67f aea2 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	@ 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40013c00 	.word	0x40013c00

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f4c:	e003      	b.n	8000f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	619a      	str	r2, [r3, #24]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f74:	887a      	ldrh	r2, [r7, #2]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	041a      	lsls	r2, r3, #16
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	400b      	ands	r3, r1
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	619a      	str	r2, [r3, #24]
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e267      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d075      	beq.n	80010a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fb6:	4b88      	ldr	r3, [pc, #544]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d00c      	beq.n	8000fdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc2:	4b85      	ldr	r3, [pc, #532]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d112      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fce:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fda:	d10b      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d05b      	beq.n	80010a0 <HAL_RCC_OscConfig+0x108>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d157      	bne.n	80010a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e242      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffc:	d106      	bne.n	800100c <HAL_RCC_OscConfig+0x74>
 8000ffe:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a75      	ldr	r2, [pc, #468]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a6f      	ldr	r2, [pc, #444]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6c      	ldr	r2, [pc, #432]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 8001030:	4b69      	ldr	r3, [pc, #420]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a68      	ldr	r2, [pc, #416]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a65      	ldr	r2, [pc, #404]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcd8 	bl	8000a04 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fcd4 	bl	8000a04 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	@ 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e207      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b5b      	ldr	r3, [pc, #364]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xc0>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fcc4 	bl	8000a04 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fcc0 	bl	8000a04 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	@ 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1f3      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	4b51      	ldr	r3, [pc, #324]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0xe8>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ae:	4b4a      	ldr	r3, [pc, #296]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ba:	4b47      	ldr	r3, [pc, #284]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11c      	bne.n	8001100 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c6:	4b44      	ldr	r3, [pc, #272]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d116      	bne.n	8001100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	4b41      	ldr	r3, [pc, #260]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x152>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e1c7      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4937      	ldr	r1, [pc, #220]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	e03a      	b.n	8001176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110e:	f7ff fc79 	bl	8000a04 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fc75 	bl	8000a04 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e1a8      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4b2b      	ldr	r3, [pc, #172]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4b28      	ldr	r3, [pc, #160]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4925      	ldr	r1, [pc, #148]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc58 	bl	8000a04 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc54 	bl	8000a04 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e187      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d036      	beq.n	80011f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d016      	beq.n	80011b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_RCC_OscConfig+0x248>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001190:	f7ff fc38 	bl	8000a04 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fc34 	bl	8000a04 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e167      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80011ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x200>
 80011b6:	e01b      	b.n	80011f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_RCC_OscConfig+0x248>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fc21 	bl	8000a04 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	e00e      	b.n	80011e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fc1d 	bl	8000a04 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d907      	bls.n	80011e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e150      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470000 	.word	0x42470000
 80011e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80011e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ea      	bne.n	80011c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8097 	beq.w	800132c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b81      	ldr	r3, [pc, #516]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10f      	bne.n	800122e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b7d      	ldr	r3, [pc, #500]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	4a7c      	ldr	r2, [pc, #496]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	@ 0x40
 800121e:	4b7a      	ldr	r3, [pc, #488]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b77      	ldr	r3, [pc, #476]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b74      	ldr	r3, [pc, #464]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a73      	ldr	r2, [pc, #460]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001246:	f7ff fbdd 	bl	8000a04 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7ff fbd9 	bl	8000a04 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e10c      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b6a      	ldr	r3, [pc, #424]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x2ea>
 8001274:	4b64      	ldr	r3, [pc, #400]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001278:	4a63      	ldr	r2, [pc, #396]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001280:	e01c      	b.n	80012bc <HAL_RCC_OscConfig+0x324>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x30c>
 800128a:	4b5f      	ldr	r3, [pc, #380]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128e:	4a5e      	ldr	r2, [pc, #376]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6713      	str	r3, [r2, #112]	@ 0x70
 8001296:	4b5c      	ldr	r3, [pc, #368]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800129a:	4a5b      	ldr	r2, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0x324>
 80012a4:	4b58      	ldr	r3, [pc, #352]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a8:	4a57      	ldr	r2, [pc, #348]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b4:	4a54      	ldr	r2, [pc, #336]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f023 0304 	bic.w	r3, r3, #4
 80012ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d015      	beq.n	80012f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fb9e 	bl	8000a04 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb9a 	bl	8000a04 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e0cb      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e2:	4b49      	ldr	r3, [pc, #292]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0ee      	beq.n	80012cc <HAL_RCC_OscConfig+0x334>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fb88 	bl	8000a04 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fb84 	bl	8000a04 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0b5      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ee      	bne.n	80012f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001320:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a38      	ldr	r2, [pc, #224]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80a1 	beq.w	8001478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d05c      	beq.n	80013fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d141      	bne.n	80013ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <HAL_RCC_OscConfig+0x478>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb58 	bl	8000a04 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fb54 	bl	8000a04 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e087      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69da      	ldr	r2, [r3, #28]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	491b      	ldr	r1, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x478>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb2d 	bl	8000a04 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fb29 	bl	8000a04 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e05c      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x416>
 80013cc:	e054      	b.n	8001478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_RCC_OscConfig+0x478>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb16 	bl	8000a04 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fb12 	bl	8000a04 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e045      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x444>
 80013fa:	e03d      	b.n	8001478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e038      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000
 8001410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x4ec>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d028      	beq.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d121      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d11a      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800144a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144c:	4293      	cmp	r3, r2
 800144e:	d111      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	3b01      	subs	r3, #1
 800145e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0cc      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d90c      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b8      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014dc:	4b59      	ldr	r3, [pc, #356]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a58      	ldr	r2, [pc, #352]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f4:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b50      	ldr	r3, [pc, #320]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	494d      	ldr	r1, [pc, #308]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d044      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d119      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	2b03      	cmp	r3, #3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e067      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f023 0203 	bic.w	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4934      	ldr	r1, [pc, #208]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001578:	f7ff fa44 	bl	8000a04 <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	e00a      	b.n	8001596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f7ff fa40 	bl	8000a04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e04f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 020c 	and.w	r2, r3, #12
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d1eb      	bne.n	8001580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d20c      	bcs.n	80015d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e032      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4916      	ldr	r1, [pc, #88]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	490e      	ldr	r1, [pc, #56]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160e:	f000 f821 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	490a      	ldr	r1, [pc, #40]	@ (8001648 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	5ccb      	ldrb	r3, [r1, r3]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f8d4 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00
 8001644:	40023800 	.word	0x40023800
 8001648:	08004a00 	.word	0x08004a00
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b090      	sub	sp, #64	@ 0x40
 800165a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800166c:	4b59      	ldr	r3, [pc, #356]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d00d      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x40>
 8001678:	2b08      	cmp	r3, #8
 800167a:	f200 80a1 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x34>
 8001682:	2b04      	cmp	r3, #4
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x3a>
 8001686:	e09b      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800168c:	e09b      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168e:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001692:	e098      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	4b4f      	ldr	r3, [pc, #316]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800169c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169e:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d028      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016aa:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	099b      	lsrs	r3, r3, #6
 80016b0:	2200      	movs	r2, #0
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016bc:	2100      	movs	r1, #0
 80016be:	4b47      	ldr	r3, [pc, #284]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x188>)
 80016c0:	fb03 f201 	mul.w	r2, r3, r1
 80016c4:	2300      	movs	r3, #0
 80016c6:	fb00 f303 	mul.w	r3, r0, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	4a43      	ldr	r2, [pc, #268]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x188>)
 80016ce:	fba0 1202 	umull	r1, r2, r0, r2
 80016d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016d4:	460a      	mov	r2, r1
 80016d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016da:	4413      	add	r3, r2
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e0:	2200      	movs	r2, #0
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	61fa      	str	r2, [r7, #28]
 80016e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016ee:	f7fe fd77 	bl	80001e0 <__aeabi_uldivmod>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4613      	mov	r3, r2
 80016f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016fa:	e053      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fc:	4b35      	ldr	r3, [pc, #212]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	099b      	lsrs	r3, r3, #6
 8001702:	2200      	movs	r2, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	617a      	str	r2, [r7, #20]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800170e:	f04f 0b00 	mov.w	fp, #0
 8001712:	4652      	mov	r2, sl
 8001714:	465b      	mov	r3, fp
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ebb2 080a 	subs.w	r8, r2, sl
 800172e:	eb63 090b 	sbc.w	r9, r3, fp
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800173e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001742:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001746:	ebb2 0408 	subs.w	r4, r2, r8
 800174a:	eb63 0509 	sbc.w	r5, r3, r9
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	00eb      	lsls	r3, r5, #3
 8001758:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800175c:	00e2      	lsls	r2, r4, #3
 800175e:	4614      	mov	r4, r2
 8001760:	461d      	mov	r5, r3
 8001762:	eb14 030a 	adds.w	r3, r4, sl
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	eb45 030b 	adc.w	r3, r5, fp
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800177a:	4629      	mov	r1, r5
 800177c:	028b      	lsls	r3, r1, #10
 800177e:	4621      	mov	r1, r4
 8001780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001784:	4621      	mov	r1, r4
 8001786:	028a      	lsls	r2, r1, #10
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178e:	2200      	movs	r2, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	60fa      	str	r2, [r7, #12]
 8001794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001798:	f7fe fd22 	bl	80001e0 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3740      	adds	r7, #64	@ 0x40
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	017d7840 	.word	0x017d7840

080017e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	@ (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	08004a10 	.word	0x08004a10

08001820 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	220f      	movs	r2, #15
 800182e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_RCC_GetClockConfig+0x5c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0203 	and.w	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800183c:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_RCC_GetClockConfig+0x5c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_RCC_GetClockConfig+0x5c>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001854:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_RCC_GetClockConfig+0x5c>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <HAL_RCC_GetClockConfig+0x60>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e041      	b.n	800191a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f839 	bl	8001922 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3304      	adds	r3, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f000 f9b2 	bl	8001c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d001      	beq.n	8001950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e044      	b.n	80019da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1e      	ldr	r2, [pc, #120]	@ (80019e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x6c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197a:	d013      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x6c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <HAL_TIM_Base_Start_IT+0xb4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00e      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x6c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x6c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x6c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d111      	bne.n	80019c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d010      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c6:	e007      	b.n	80019d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40000800 	.word	0x40000800
 80019f4:	40000c00 	.word	0x40000c00
 80019f8:	40014000 	.word	0x40014000

080019fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d020      	beq.n	8001a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0202 	mvn.w	r2, #2
 8001a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f8d2 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001a4c:	e005      	b.n	8001a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f8c4 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f8d5 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d020      	beq.n	8001aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d01b      	beq.n	8001aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0204 	mvn.w	r2, #4
 8001a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8ac 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001a98:	e005      	b.n	8001aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f89e 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8af 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d020      	beq.n	8001af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0208 	mvn.w	r2, #8
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2204      	movs	r2, #4
 8001ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f886 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f878 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f889 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d020      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01b      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0210 	mvn.w	r2, #16
 8001b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f860 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001b30:	e005      	b.n	8001b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f852 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f863 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0201 	mvn.w	r2, #1
 8001b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fdf8 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8e6 	bl	8001d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f834 	bl	8001c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0220 	mvn.w	r2, #32
 8001bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8b8 	bl	8001d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d28 <TIM_Base_SetConfig+0xfc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00f      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c4a:	d00b      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a37      	ldr	r2, [pc, #220]	@ (8001d2c <TIM_Base_SetConfig+0x100>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a36      	ldr	r2, [pc, #216]	@ (8001d30 <TIM_Base_SetConfig+0x104>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a35      	ldr	r2, [pc, #212]	@ (8001d34 <TIM_Base_SetConfig+0x108>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d108      	bne.n	8001c76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a2b      	ldr	r2, [pc, #172]	@ (8001d28 <TIM_Base_SetConfig+0xfc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01b      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c84:	d017      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a28      	ldr	r2, [pc, #160]	@ (8001d2c <TIM_Base_SetConfig+0x100>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <TIM_Base_SetConfig+0x104>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00f      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <TIM_Base_SetConfig+0x108>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00b      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a25      	ldr	r2, [pc, #148]	@ (8001d38 <TIM_Base_SetConfig+0x10c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a24      	ldr	r2, [pc, #144]	@ (8001d3c <TIM_Base_SetConfig+0x110>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d003      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <TIM_Base_SetConfig+0x114>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <TIM_Base_SetConfig+0xfc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d103      	bne.n	8001cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f023 0201 	bic.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40000800 	.word	0x40000800
 8001d34:	40000c00 	.word	0x40000c00
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40014400 	.word	0x40014400
 8001d40:	40014800 	.word	0x40014800

08001d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <__NVIC_SetPriority>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Handler+0x1c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001dc8:	f001 fd18 	bl	80037fc <xTaskGetSchedulerState>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001dd2:	f002 fb11 	bl	80043f8 <xPortSysTickHandler>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001de4:	2100      	movs	r1, #0
 8001de6:	f06f 0004 	mvn.w	r0, #4
 8001dea:	f7ff ffbf 	bl	8001d6c <__NVIC_SetPriority>
#endif
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dfa:	f3ef 8305 	mrs	r3, IPSR
 8001dfe:	603b      	str	r3, [r7, #0]
  return(result);
 8001e00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e06:	f06f 0305 	mvn.w	r3, #5
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	e00c      	b.n	8001e28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <osKernelInitialize+0x44>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <osKernelInitialize+0x44>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	e002      	b.n	8001e28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000080 	.word	0x20000080

08001e3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e42:	f3ef 8305 	mrs	r3, IPSR
 8001e46:	603b      	str	r3, [r7, #0]
  return(result);
 8001e48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e4e:	f06f 0305 	mvn.w	r3, #5
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	e010      	b.n	8001e78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <osKernelStart+0x48>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d109      	bne.n	8001e72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e5e:	f7ff ffbf 	bl	8001de0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <osKernelStart+0x48>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e68:	f001 f87a 	bl	8002f60 <vTaskStartScheduler>
      stat = osOK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	e002      	b.n	8001e78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000080 	.word	0x20000080

08001e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	@ 0x38
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e98:	f3ef 8305 	mrs	r3, IPSR
 8001e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8001e9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d17e      	bne.n	8001fa2 <osThreadNew+0x11a>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d07b      	beq.n	8001fa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001eae:	2318      	movs	r3, #24
 8001eb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d045      	beq.n	8001f4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <osThreadNew+0x48>
        name = attr->name;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <osThreadNew+0x6e>
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b38      	cmp	r3, #56	@ 0x38
 8001ee8:	d805      	bhi.n	8001ef6 <osThreadNew+0x6e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <osThreadNew+0x72>
        return (NULL);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e054      	b.n	8001fa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <osThreadNew+0xa8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f18:	d90a      	bls.n	8001f30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <osThreadNew+0xa8>
        mem = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	e010      	b.n	8001f52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10c      	bne.n	8001f52 <osThreadNew+0xca>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <osThreadNew+0xca>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <osThreadNew+0xca>
          mem = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e001      	b.n	8001f52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d110      	bne.n	8001f7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f60:	9202      	str	r2, [sp, #8]
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fe1a 	bl	8002ba8 <xTaskCreateStatic>
 8001f74:	4603      	mov	r3, r0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e013      	b.n	8001fa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d110      	bne.n	8001fa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fe68 	bl	8002c68 <xTaskCreate>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <osThreadNew+0x11a>
            hTask = NULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fa2:	693b      	ldr	r3, [r7, #16]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3728      	adds	r7, #40	@ 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb4:	f3ef 8305 	mrs	r3, IPSR
 8001fb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <osDelay+0x1c>
    stat = osErrorISR;
 8001fc0:	f06f 0305 	mvn.w	r3, #5
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e007      	b.n	8001fd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 ff8e 	bl	8002ef4 <vTaskDelay>
    }
  }

  return (stat);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a06      	ldr	r2, [pc, #24]	@ (8002014 <vApplicationGetIdleTaskMemory+0x30>)
 8001ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000084 	.word	0x20000084
 8002014:	200000e0 	.word	0x200000e0

08002018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <vApplicationGetTimerTaskMemory+0x2c>)
 8002028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <vApplicationGetTimerTaskMemory+0x30>)
 800202e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	200002e0 	.word	0x200002e0
 8002048:	2000033c 	.word	0x2000033c

0800204c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0208 	add.w	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f103 0208 	add.w	r2, r3, #8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0208 	add.w	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d103      	bne.n	800210e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e00c      	b.n	8002128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3308      	adds	r3, #8
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e002      	b.n	800211c <vListInsert+0x2e>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d2f6      	bcs.n	8002116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6892      	ldr	r2, [r2, #8]
 8002176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6852      	ldr	r2, [r2, #4]
 8002180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d103      	bne.n	8002194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021e0:	f002 f87a 	bl	80042d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	441a      	add	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	3b01      	subs	r3, #1
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	441a      	add	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	22ff      	movs	r2, #255	@ 0xff
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	22ff      	movs	r2, #255	@ 0xff
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d114      	bne.n	8002260 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01a      	beq.n	8002274 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3310      	adds	r3, #16
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f91a 	bl	800347c <xTaskRemoveFromEventList>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d012      	beq.n	8002274 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <xQueueGenericReset+0xd0>)
 8002250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	e009      	b.n	8002274 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3310      	adds	r3, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fef1 	bl	800204c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3324      	adds	r3, #36	@ 0x24
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff feec 	bl	800204c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002274:	f002 f862 	bl	800433c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000ed04 	.word	0xe000ed04

08002288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08e      	sub	sp, #56	@ 0x38
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10b      	bne.n	80022b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800229c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	e7fd      	b.n	80022ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <xQueueGenericCreateStatic+0x56>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <xQueueGenericCreateStatic+0x5a>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <xQueueGenericCreateStatic+0x5c>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	623b      	str	r3, [r7, #32]
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <xQueueGenericCreateStatic+0x84>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <xQueueGenericCreateStatic+0x88>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <xQueueGenericCreateStatic+0x8a>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	61fb      	str	r3, [r7, #28]
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	e7fd      	b.n	800232a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800232e:	2350      	movs	r3, #80	@ 0x50
 8002330:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b50      	cmp	r3, #80	@ 0x50
 8002336:	d00b      	beq.n	8002350 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	61bb      	str	r3, [r7, #24]
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002350:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002364:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f805 	bl	8002382 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800237a:	4618      	mov	r0, r3
 800237c:	3730      	adds	r7, #48	@ 0x30
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e002      	b.n	80023a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023b0:	2101      	movs	r1, #1
 80023b2:	69b8      	ldr	r0, [r7, #24]
 80023b4:	f7ff fefe 	bl	80021b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08e      	sub	sp, #56	@ 0x38
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <xQueueGenericSend+0x34>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <xQueueGenericSend+0x42>
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <xQueueGenericSend+0x46>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <xQueueGenericSend+0x48>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <xQueueGenericSend+0x64>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x72>
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <xQueueGenericSend+0x76>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueGenericSend+0x78>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGenericSend+0x94>
	__asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	623b      	str	r3, [r7, #32]
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800245c:	f001 f9ce 	bl	80037fc <xTaskGetSchedulerState>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <xQueueGenericSend+0xa4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <xQueueGenericSend+0xa8>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <xQueueGenericSend+0xaa>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <xQueueGenericSend+0xc6>
	__asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	61fb      	str	r3, [r7, #28]
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	e7fd      	b.n	800248a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800248e:	f001 ff23 	bl	80042d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <xQueueGenericSend+0xdc>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d129      	bne.n	80024f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024aa:	f000 fa0f 	bl	80028cc <prvCopyDataToQueue>
 80024ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	3324      	adds	r3, #36	@ 0x24
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 ffdd 	bl	800347c <xTaskRemoveFromEventList>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024c8:	4b3f      	ldr	r3, [pc, #252]	@ (80025c8 <xQueueGenericSend+0x200>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	e00a      	b.n	80024f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <xQueueGenericSend+0x200>)
 80024e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024f0:	f001 ff24 	bl	800433c <vPortExitCritical>
				return pdPASS;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e063      	b.n	80025c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024fe:	f001 ff1d 	bl	800433c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002502:	2300      	movs	r3, #0
 8002504:	e05c      	b.n	80025c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4618      	mov	r0, r3
 8002512:	f001 f817 	bl	8003544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002516:	2301      	movs	r3, #1
 8002518:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800251a:	f001 ff0f 	bl	800433c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800251e:	f000 fd87 	bl	8003030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002522:	f001 fed9 	bl	80042d8 <vPortEnterCritical>
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d103      	bne.n	800253c <xQueueGenericSend+0x174>
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002542:	b25b      	sxtb	r3, r3
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d103      	bne.n	8002552 <xQueueGenericSend+0x18a>
 800254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002552:	f001 fef3 	bl	800433c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002556:	1d3a      	adds	r2, r7, #4
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f001 f806 	bl	8003570 <xTaskCheckForTimeOut>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d124      	bne.n	80025b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800256a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800256c:	f000 faa6 	bl	8002abc <prvIsQueueFull>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	3310      	adds	r3, #16
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 ff2a 	bl	80033d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002586:	f000 fa31 	bl	80029ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800258a:	f000 fd5f 	bl	800304c <xTaskResumeAll>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f af7c 	bne.w	800248e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <xQueueGenericSend+0x200>)
 8002598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	e772      	b.n	800248e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025aa:	f000 fa1f 	bl	80029ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025ae:	f000 fd4d 	bl	800304c <xTaskResumeAll>
 80025b2:	e76c      	b.n	800248e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025b6:	f000 fa19 	bl	80029ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025ba:	f000 fd47 	bl	800304c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	@ 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b090      	sub	sp, #64	@ 0x40
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <xQueueGenericSendFromISR+0x3e>
 8002602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <xQueueGenericSendFromISR+0x42>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericSendFromISR+0x44>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d103      	bne.n	800263a <xQueueGenericSendFromISR+0x6e>
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <xQueueGenericSendFromISR+0x72>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSendFromISR+0x74>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	623b      	str	r3, [r7, #32]
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800265c:	f001 ff1c 	bl	8004498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002660:	f3ef 8211 	mrs	r2, BASEPRI
 8002664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61fa      	str	r2, [r7, #28]
 8002676:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002678:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800267a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800267c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <xQueueGenericSendFromISR+0xc2>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d12f      	bne.n	80026ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002694:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026a4:	f000 f912 	bl	80028cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d112      	bne.n	80026d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026bc:	3324      	adds	r3, #36	@ 0x24
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fedc 	bl	800347c <xTaskRemoveFromEventList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00e      	beq.n	80026e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026dc:	3301      	adds	r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	b25a      	sxtb	r2, r3
 80026e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80026e8:	2301      	movs	r3, #1
 80026ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80026ec:	e001      	b.n	80026f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002700:	4618      	mov	r0, r3
 8002702:	3740      	adds	r7, #64	@ 0x40
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	@ 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <xQueueReceive+0x32>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	623b      	str	r3, [r7, #32]
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	e7fd      	b.n	8002736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <xQueueReceive+0x40>
 8002740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <xQueueReceive+0x44>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <xQueueReceive+0x46>
 800274c:	2300      	movs	r3, #0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <xQueueReceive+0x62>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	61fb      	str	r3, [r7, #28]
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800276a:	f001 f847 	bl	80037fc <xTaskGetSchedulerState>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <xQueueReceive+0x72>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <xQueueReceive+0x76>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <xQueueReceive+0x78>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <xQueueReceive+0x94>
	__asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	61bb      	str	r3, [r7, #24]
}
 8002796:	bf00      	nop
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800279c:	f001 fd9c 	bl	80042d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01f      	beq.n	80027ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027b0:	f000 f8f6 	bl	80029a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00f      	beq.n	80027e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	3310      	adds	r3, #16
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fe57 	bl	800347c <xTaskRemoveFromEventList>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027d4:	4b3c      	ldr	r3, [pc, #240]	@ (80028c8 <xQueueReceive+0x1c0>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027e4:	f001 fdaa 	bl	800433c <vPortExitCritical>
				return pdPASS;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e069      	b.n	80028c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027f2:	f001 fda3 	bl	800433c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e062      	b.n	80028c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fe9d 	bl	8003544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800280a:	2301      	movs	r3, #1
 800280c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800280e:	f001 fd95 	bl	800433c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002812:	f000 fc0d 	bl	8003030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002816:	f001 fd5f 	bl	80042d8 <vPortEnterCritical>
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002820:	b25b      	sxtb	r3, r3
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d103      	bne.n	8002830 <xQueueReceive+0x128>
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002836:	b25b      	sxtb	r3, r3
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d103      	bne.n	8002846 <xQueueReceive+0x13e>
 800283e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002846:	f001 fd79 	bl	800433c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800284a:	1d3a      	adds	r2, r7, #4
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fe8c 	bl	8003570 <xTaskCheckForTimeOut>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d123      	bne.n	80028a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800285e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002860:	f000 f916 	bl	8002a90 <prvIsQueueEmpty>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d017      	beq.n	800289a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	3324      	adds	r3, #36	@ 0x24
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fdb0 	bl	80033d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002878:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800287a:	f000 f8b7 	bl	80029ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800287e:	f000 fbe5 	bl	800304c <xTaskResumeAll>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d189      	bne.n	800279c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <xQueueReceive+0x1c0>)
 800288a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	e780      	b.n	800279c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800289a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800289c:	f000 f8a6 	bl	80029ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028a0:	f000 fbd4 	bl	800304c <xTaskResumeAll>
 80028a4:	e77a      	b.n	800279c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a8:	f000 f8a0 	bl	80029ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028ac:	f000 fbce 	bl	800304c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028b2:	f000 f8ed 	bl	8002a90 <prvIsQueueEmpty>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f43f af6f 	beq.w	800279c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3730      	adds	r7, #48	@ 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14d      	bne.n	800298e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 ff9e 	bl	8003838 <xTaskPriorityDisinherit>
 80028fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	e043      	b.n	800298e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d119      	bne.n	8002940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6858      	ldr	r0, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	461a      	mov	r2, r3
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	f002 f81a 	bl	8004950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	441a      	add	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d32b      	bcc.n	800298e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e026      	b.n	800298e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68d8      	ldr	r0, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	461a      	mov	r2, r3
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	f002 f800 	bl	8004950 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	425b      	negs	r3, r3
 800295a:	441a      	add	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	425b      	negs	r3, r3
 8002976:	441a      	add	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d105      	bne.n	800298e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3b01      	subs	r3, #1
 800298c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002996:	697b      	ldr	r3, [r7, #20]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d018      	beq.n	80029e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d303      	bcc.n	80029d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68d9      	ldr	r1, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	461a      	mov	r2, r3
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f001 ffb6 	bl	8004950 <memcpy>
	}
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029f4:	f001 fc70 	bl	80042d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a00:	e011      	b.n	8002a26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3324      	adds	r3, #36	@ 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd34 	bl	800347c <xTaskRemoveFromEventList>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a1a:	f000 fe0d 	bl	8003638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	dce9      	bgt.n	8002a02 <prvUnlockQueue+0x16>
 8002a2e:	e000      	b.n	8002a32 <prvUnlockQueue+0x46>
					break;
 8002a30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	22ff      	movs	r2, #255	@ 0xff
 8002a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a3a:	f001 fc7f 	bl	800433c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a3e:	f001 fc4b 	bl	80042d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a4a:	e011      	b.n	8002a70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3310      	adds	r3, #16
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fd0f 	bl	800347c <xTaskRemoveFromEventList>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a64:	f000 fde8 	bl	8003638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dce9      	bgt.n	8002a4c <prvUnlockQueue+0x60>
 8002a78:	e000      	b.n	8002a7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	22ff      	movs	r2, #255	@ 0xff
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002a84:	f001 fc5a 	bl	800433c <vPortExitCritical>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a98:	f001 fc1e 	bl	80042d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e001      	b.n	8002aae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aae:	f001 fc45 	bl	800433c <vPortExitCritical>

	return xReturn;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ac4:	f001 fc08 	bl	80042d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d102      	bne.n	8002ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e001      	b.n	8002ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ade:	f001 fc2d 	bl	800433c <vPortExitCritical>

	return xReturn;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e014      	b.n	8002b26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002afc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b3c <vQueueAddToRegistry+0x50>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b08:	490c      	ldr	r1, [pc, #48]	@ (8002b3c <vQueueAddToRegistry+0x50>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b12:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <vQueueAddToRegistry+0x50>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b1e:	e006      	b.n	8002b2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	d9e7      	bls.n	8002afc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000073c 	.word	0x2000073c

08002b40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b50:	f001 fbc2 	bl	80042d8 <vPortEnterCritical>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d103      	bne.n	8002b6a <vQueueWaitForMessageRestricted+0x2a>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d103      	bne.n	8002b80 <vQueueWaitForMessageRestricted+0x40>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b80:	f001 fbdc 	bl	800433c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3324      	adds	r3, #36	@ 0x24
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fc45 	bl	8003424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7ff ff26 	bl	80029ec <prvUnlockQueue>
	}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af04      	add	r7, sp, #16
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	623b      	str	r3, [r7, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	61fb      	str	r3, [r7, #28]
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bf2:	235c      	movs	r3, #92	@ 0x5c
 8002bf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b5c      	cmp	r3, #92	@ 0x5c
 8002bfa:	d00b      	beq.n	8002c14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	61bb      	str	r3, [r7, #24]
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01e      	beq.n	8002c5a <xTaskCreateStatic+0xb2>
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01b      	beq.n	8002c5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c34:	2300      	movs	r3, #0
 8002c36:	9303      	str	r3, [sp, #12]
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f850 	bl	8002cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c54:	f000 f8de 	bl	8002e14 <prvAddNewTaskToReadyList>
 8002c58:	e001      	b.n	8002c5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c5e:	697b      	ldr	r3, [r7, #20]
	}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3728      	adds	r7, #40	@ 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	@ 0x30
 8002c6c:	af04      	add	r7, sp, #16
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 fc4d 	bl	800451c <pvPortMalloc>
 8002c82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c8a:	205c      	movs	r0, #92	@ 0x5c
 8002c8c:	f001 fc46 	bl	800451c <pvPortMalloc>
 8002c90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9e:	e005      	b.n	8002cac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f001 fd09 	bl	80046b8 <vPortFree>
 8002ca6:	e001      	b.n	8002cac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d017      	beq.n	8002ce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9303      	str	r3, [sp, #12]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f80e 	bl	8002cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cd6:	69f8      	ldr	r0, [r7, #28]
 8002cd8:	f000 f89c 	bl	8002e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e002      	b.n	8002ce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	21a5      	movs	r1, #165	@ 0xa5
 8002d0c:	f001 fdf4 	bl	80048f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f023 0307 	bic.w	r3, r3, #7
 8002d28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	617b      	str	r3, [r7, #20]
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01f      	beq.n	8002d92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e012      	b.n	8002d7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	7819      	ldrb	r1, [r3, #0]
 8002d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	3334      	adds	r3, #52	@ 0x34
 8002d68:	460a      	mov	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d9e9      	bls.n	8002d58 <prvInitialiseNewTask+0x66>
 8002d84:	e000      	b.n	8002d88 <prvInitialiseNewTask+0x96>
			{
				break;
 8002d86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d90:	e003      	b.n	8002d9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	2b37      	cmp	r3, #55	@ 0x37
 8002d9e:	d901      	bls.n	8002da4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002da0:	2337      	movs	r3, #55	@ 0x37
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	2200      	movs	r2, #0
 8002db4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	3304      	adds	r3, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f966 	bl	800208c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f961 	bl	800208c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	2200      	movs	r2, #0
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	69b8      	ldr	r0, [r7, #24]
 8002df4:	f001 f93e 	bl	8004074 <pxPortInitialiseStack>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0a:	bf00      	nop
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e1c:	f001 fa5c 	bl	80042d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e20:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed8 <prvAddNewTaskToReadyList+0xc4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <prvAddNewTaskToReadyList+0xc4>)
 8002e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e32:	4a2a      	ldr	r2, [pc, #168]	@ (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e38:	4b27      	ldr	r3, [pc, #156]	@ (8002ed8 <prvAddNewTaskToReadyList+0xc4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d110      	bne.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e40:	f000 fc1e 	bl	8003680 <prvInitialiseTaskLists>
 8002e44:	e00d      	b.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e46:	4b26      	ldr	r3, [pc, #152]	@ (8002ee0 <prvAddNewTaskToReadyList+0xcc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e4e:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d802      	bhi.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <prvAddNewTaskToReadyList+0xd0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <prvAddNewTaskToReadyList+0xd0>)
 8002e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <prvAddNewTaskToReadyList+0xd0>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <prvAddNewTaskToReadyList+0xd4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d903      	bls.n	8002e88 <prvAddNewTaskToReadyList+0x74>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <prvAddNewTaskToReadyList+0xd4>)
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <prvAddNewTaskToReadyList+0xd8>)
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f7ff f901 	bl	80020a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ea4:	f001 fa4a 	bl	800433c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <prvAddNewTaskToReadyList+0xcc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d207      	bcs.n	8002ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <prvAddNewTaskToReadyList+0xdc>)
 8002ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000c50 	.word	0x20000c50
 8002edc:	2000077c 	.word	0x2000077c
 8002ee0:	20000c5c 	.word	0x20000c5c
 8002ee4:	20000c6c 	.word	0x20000c6c
 8002ee8:	20000c58 	.word	0x20000c58
 8002eec:	20000780 	.word	0x20000780
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d018      	beq.n	8002f38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <vTaskDelay+0x64>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <vTaskDelay+0x32>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	60bb      	str	r3, [r7, #8]
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	e7fd      	b.n	8002f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f26:	f000 f883 	bl	8003030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fcf3 	bl	8003918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f32:	f000 f88b 	bl	800304c <xTaskResumeAll>
 8002f36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f3e:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <vTaskDelay+0x68>)
 8002f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000c78 	.word	0x20000c78
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f6e:	463a      	mov	r2, r7
 8002f70:	1d39      	adds	r1, r7, #4
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f834 	bl	8001fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	9202      	str	r2, [sp, #8]
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	2300      	movs	r3, #0
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	4922      	ldr	r1, [pc, #136]	@ (8003018 <vTaskStartScheduler+0xb8>)
 8002f90:	4822      	ldr	r0, [pc, #136]	@ (800301c <vTaskStartScheduler+0xbc>)
 8002f92:	f7ff fe09 	bl	8002ba8 <xTaskCreateStatic>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a21      	ldr	r2, [pc, #132]	@ (8003020 <vTaskStartScheduler+0xc0>)
 8002f9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f9c:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <vTaskStartScheduler+0xc0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e001      	b.n	8002fae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fb4:	f000 fd04 	bl	80039c0 <xTimerCreateTimerTask>
 8002fb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d116      	bne.n	8002fee <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	613b      	str	r3, [r7, #16]
}
 8002fd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <vTaskStartScheduler+0xc4>)
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <vTaskStartScheduler+0xc8>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <vTaskStartScheduler+0xcc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fe8:	f001 f8d2 	bl	8004190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fec:	e00f      	b.n	800300e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d10b      	bne.n	800300e <vTaskStartScheduler+0xae>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60fb      	str	r3, [r7, #12]
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <vTaskStartScheduler+0xaa>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	080049a0 	.word	0x080049a0
 800301c:	08003651 	.word	0x08003651
 8003020:	20000c74 	.word	0x20000c74
 8003024:	20000c70 	.word	0x20000c70
 8003028:	20000c5c 	.word	0x20000c5c
 800302c:	20000c54 	.word	0x20000c54

08003030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <vTaskSuspendAll+0x18>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a03      	ldr	r2, [pc, #12]	@ (8003048 <vTaskSuspendAll+0x18>)
 800303c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	20000c78 	.word	0x20000c78

0800304c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800305a:	4b42      	ldr	r3, [pc, #264]	@ (8003164 <xTaskResumeAll+0x118>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <xTaskResumeAll+0x2e>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	603b      	str	r3, [r7, #0]
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	e7fd      	b.n	8003076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800307a:	f001 f92d 	bl	80042d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800307e:	4b39      	ldr	r3, [pc, #228]	@ (8003164 <xTaskResumeAll+0x118>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	4a37      	ldr	r2, [pc, #220]	@ (8003164 <xTaskResumeAll+0x118>)
 8003086:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003088:	4b36      	ldr	r3, [pc, #216]	@ (8003164 <xTaskResumeAll+0x118>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d162      	bne.n	8003156 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003090:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <xTaskResumeAll+0x11c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05e      	beq.n	8003156 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003098:	e02f      	b.n	80030fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800309a:	4b34      	ldr	r3, [pc, #208]	@ (800316c <xTaskResumeAll+0x120>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3318      	adds	r3, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f85a 	bl	8002160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f855 	bl	8002160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <xTaskResumeAll+0x124>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d903      	bls.n	80030ca <xTaskResumeAll+0x7e>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003170 <xTaskResumeAll+0x124>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <xTaskResumeAll+0x128>)
 80030d8:	441a      	add	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3304      	adds	r3, #4
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f7fe ffe0 	bl	80020a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ea:	4b23      	ldr	r3, [pc, #140]	@ (8003178 <xTaskResumeAll+0x12c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80030f4:	4b21      	ldr	r3, [pc, #132]	@ (800317c <xTaskResumeAll+0x130>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030fa:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <xTaskResumeAll+0x120>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1cb      	bne.n	800309a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003108:	f000 fb58 	bl	80037bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800310c:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <xTaskResumeAll+0x134>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003118:	f000 f846 	bl	80031a8 <xTaskIncrementTick>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003122:	4b16      	ldr	r3, [pc, #88]	@ (800317c <xTaskResumeAll+0x130>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f1      	bne.n	8003118 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <xTaskResumeAll+0x134>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <xTaskResumeAll+0x130>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003146:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <xTaskResumeAll+0x138>)
 8003148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003156:	f001 f8f1 	bl	800433c <vPortExitCritical>

	return xAlreadyYielded;
 800315a:	68bb      	ldr	r3, [r7, #8]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000c78 	.word	0x20000c78
 8003168:	20000c50 	.word	0x20000c50
 800316c:	20000c10 	.word	0x20000c10
 8003170:	20000c58 	.word	0x20000c58
 8003174:	20000780 	.word	0x20000780
 8003178:	2000077c 	.word	0x2000077c
 800317c:	20000c64 	.word	0x20000c64
 8003180:	20000c60 	.word	0x20000c60
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <xTaskGetTickCount+0x1c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003194:	687b      	ldr	r3, [r7, #4]
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000c54 	.word	0x20000c54

080031a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b2:	4b4f      	ldr	r3, [pc, #316]	@ (80032f0 <xTaskIncrementTick+0x148>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8090 	bne.w	80032dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031bc:	4b4d      	ldr	r3, [pc, #308]	@ (80032f4 <xTaskIncrementTick+0x14c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031c4:	4a4b      	ldr	r2, [pc, #300]	@ (80032f4 <xTaskIncrementTick+0x14c>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d121      	bne.n	8003214 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80031d0:	4b49      	ldr	r3, [pc, #292]	@ (80032f8 <xTaskIncrementTick+0x150>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	603b      	str	r3, [r7, #0]
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	e7fd      	b.n	80031ee <xTaskIncrementTick+0x46>
 80031f2:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <xTaskIncrementTick+0x150>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	4b40      	ldr	r3, [pc, #256]	@ (80032fc <xTaskIncrementTick+0x154>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3e      	ldr	r2, [pc, #248]	@ (80032f8 <xTaskIncrementTick+0x150>)
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4a3e      	ldr	r2, [pc, #248]	@ (80032fc <xTaskIncrementTick+0x154>)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b3e      	ldr	r3, [pc, #248]	@ (8003300 <xTaskIncrementTick+0x158>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <xTaskIncrementTick+0x158>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	f000 fad4 	bl	80037bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <xTaskIncrementTick+0x15c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	429a      	cmp	r2, r3
 800321c:	d349      	bcc.n	80032b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800321e:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <xTaskIncrementTick+0x150>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <xTaskIncrementTick+0x15c>)
 800322a:	f04f 32ff 	mov.w	r2, #4294967295
 800322e:	601a      	str	r2, [r3, #0]
					break;
 8003230:	e03f      	b.n	80032b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003232:	4b31      	ldr	r3, [pc, #196]	@ (80032f8 <xTaskIncrementTick+0x150>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d203      	bcs.n	8003252 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800324a:	4a2e      	ldr	r2, [pc, #184]	@ (8003304 <xTaskIncrementTick+0x15c>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003250:	e02f      	b.n	80032b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3304      	adds	r3, #4
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff82 	bl	8002160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3318      	adds	r3, #24
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe ff79 	bl	8002160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003272:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <xTaskIncrementTick+0x160>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d903      	bls.n	8003282 <xTaskIncrementTick+0xda>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <xTaskIncrementTick+0x160>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <xTaskIncrementTick+0x164>)
 8003290:	441a      	add	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f7fe ff04 	bl	80020a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <xTaskIncrementTick+0x168>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3b8      	bcc.n	800321e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b0:	e7b5      	b.n	800321e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032b2:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <xTaskIncrementTick+0x168>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b8:	4914      	ldr	r1, [pc, #80]	@ (800330c <xTaskIncrementTick+0x164>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d901      	bls.n	80032ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032ce:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <xTaskIncrementTick+0x16c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e004      	b.n	80032e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <xTaskIncrementTick+0x170>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <xTaskIncrementTick+0x170>)
 80032e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032e6:	697b      	ldr	r3, [r7, #20]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000c78 	.word	0x20000c78
 80032f4:	20000c54 	.word	0x20000c54
 80032f8:	20000c08 	.word	0x20000c08
 80032fc:	20000c0c 	.word	0x20000c0c
 8003300:	20000c68 	.word	0x20000c68
 8003304:	20000c70 	.word	0x20000c70
 8003308:	20000c58 	.word	0x20000c58
 800330c:	20000780 	.word	0x20000780
 8003310:	2000077c 	.word	0x2000077c
 8003314:	20000c64 	.word	0x20000c64
 8003318:	20000c60 	.word	0x20000c60

0800331c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003322:	4b28      	ldr	r3, [pc, #160]	@ (80033c4 <vTaskSwitchContext+0xa8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800332a:	4b27      	ldr	r3, [pc, #156]	@ (80033c8 <vTaskSwitchContext+0xac>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003330:	e042      	b.n	80033b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003332:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <vTaskSwitchContext+0xac>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003338:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <vTaskSwitchContext+0xb0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e011      	b.n	8003364 <vTaskSwitchContext+0x48>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <vTaskSwitchContext+0x42>
	__asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	607b      	str	r3, [r7, #4]
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	e7fd      	b.n	800335a <vTaskSwitchContext+0x3e>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b01      	subs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	491a      	ldr	r1, [pc, #104]	@ (80033d0 <vTaskSwitchContext+0xb4>)
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0e3      	beq.n	8003340 <vTaskSwitchContext+0x24>
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4a13      	ldr	r2, [pc, #76]	@ (80033d0 <vTaskSwitchContext+0xb4>)
 8003384:	4413      	add	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3308      	adds	r3, #8
 800339a:	429a      	cmp	r2, r3
 800339c:	d104      	bne.n	80033a8 <vTaskSwitchContext+0x8c>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a09      	ldr	r2, [pc, #36]	@ (80033d4 <vTaskSwitchContext+0xb8>)
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4a06      	ldr	r2, [pc, #24]	@ (80033cc <vTaskSwitchContext+0xb0>)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000c78 	.word	0x20000c78
 80033c8:	20000c64 	.word	0x20000c64
 80033cc:	20000c58 	.word	0x20000c58
 80033d0:	20000780 	.word	0x20000780
 80033d4:	2000077c 	.word	0x2000077c

080033d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60fb      	str	r3, [r7, #12]
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <vTaskPlaceOnEventList+0x48>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3318      	adds	r3, #24
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe fe70 	bl	80020ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800340e:	2101      	movs	r1, #1
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f000 fa81 	bl	8003918 <prvAddCurrentTaskToDelayedList>
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000077c 	.word	0x2000077c

08003424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <vTaskPlaceOnEventListRestricted+0x54>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fe fe25 	bl	80020a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f000 fa54 	bl	8003918 <prvAddCurrentTaskToDelayedList>
	}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000077c 	.word	0x2000077c

0800347c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60fb      	str	r3, [r7, #12]
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fe56 	bl	8002160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <xTaskRemoveFromEventList+0xb0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fe4d 	bl	8002160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ca:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <xTaskRemoveFromEventList+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d903      	bls.n	80034da <xTaskRemoveFromEventList+0x5e>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	4a16      	ldr	r2, [pc, #88]	@ (8003530 <xTaskRemoveFromEventList+0xb4>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <xTaskRemoveFromEventList+0xb8>)
 80034e8:	441a      	add	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fe fdd8 	bl	80020a6 <vListInsertEnd>
 80034f6:	e005      	b.n	8003504 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3318      	adds	r3, #24
 80034fc:	4619      	mov	r1, r3
 80034fe:	480e      	ldr	r0, [pc, #56]	@ (8003538 <xTaskRemoveFromEventList+0xbc>)
 8003500:	f7fe fdd1 	bl	80020a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <xTaskRemoveFromEventList+0xc0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	429a      	cmp	r2, r3
 8003510:	d905      	bls.n	800351e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <xTaskRemoveFromEventList+0xc4>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e001      	b.n	8003522 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003522:	697b      	ldr	r3, [r7, #20]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000c78 	.word	0x20000c78
 8003530:	20000c58 	.word	0x20000c58
 8003534:	20000780 	.word	0x20000780
 8003538:	20000c10 	.word	0x20000c10
 800353c:	2000077c 	.word	0x2000077c
 8003540:	20000c64 	.word	0x20000c64

08003544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <vTaskInternalSetTimeOutState+0x24>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <vTaskInternalSetTimeOutState+0x28>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	605a      	str	r2, [r3, #4]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	20000c68 	.word	0x20000c68
 800356c:	20000c54 	.word	0x20000c54

08003570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60fb      	str	r3, [r7, #12]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80035b6:	f000 fe8f 	bl	80042d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <xTaskCheckForTimeOut+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e023      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <xTaskCheckForTimeOut+0xc4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d007      	beq.n	80035f6 <xTaskCheckForTimeOut+0x86>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e015      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d20b      	bcs.n	8003618 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff99 	bl	8003544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e004      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f000 fe8b 	bl	800433c <vPortExitCritical>

	return xReturn;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000c54 	.word	0x20000c54
 8003634:	20000c68 	.word	0x20000c68

08003638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <vTaskMissedYield+0x14>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000c64 	.word	0x20000c64

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003658:	f000 f852 	bl	8003700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <prvIdleTask+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d9f9      	bls.n	8003658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <prvIdleTask+0x2c>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003674:	e7f0      	b.n	8003658 <prvIdleTask+0x8>
 8003676:	bf00      	nop
 8003678:	20000780 	.word	0x20000780
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fcd6 	bl	800204c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b37      	cmp	r3, #55	@ 0x37
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	@ (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7fe fccd 	bl	800204c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	@ (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7fe fcca 	bl	800204c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	@ (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7fe fcc7 	bl	800204c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7fe fcc4 	bl	800204c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7fe fcc1 	bl	800204c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	@ (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000780 	.word	0x20000780
 80036e4:	20000be0 	.word	0x20000be0
 80036e8:	20000bf4 	.word	0x20000bf4
 80036ec:	20000c10 	.word	0x20000c10
 80036f0:	20000c24 	.word	0x20000c24
 80036f4:	20000c3c 	.word	0x20000c3c
 80036f8:	20000c08 	.word	0x20000c08
 80036fc:	20000c0c 	.word	0x20000c0c

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003708:	f000 fde6 	bl	80042d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fd21 	bl	8002160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003732:	f000 fe03 	bl	800433c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000c24 	.word	0x20000c24
 8003754:	20000c50 	.word	0x20000c50
 8003758:	20000c38 	.word	0x20000c38

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	4618      	mov	r0, r3
 8003774:	f000 ffa0 	bl	80046b8 <vPortFree>
				vPortFree( pxTCB );
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 ff9d 	bl	80046b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800377e:	e019      	b.n	80037b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003786:	2b01      	cmp	r3, #1
 8003788:	d103      	bne.n	8003792 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 ff94 	bl	80046b8 <vPortFree>
	}
 8003790:	e010      	b.n	80037b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003798:	2b02      	cmp	r3, #2
 800379a:	d00b      	beq.n	80037b4 <prvDeleteTCB+0x58>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <prvDeleteTCB+0x54>
	}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c2:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <prvResetNextTaskUnblockTime+0x38>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <prvResetNextTaskUnblockTime+0x3c>)
 80037ce:	f04f 32ff 	mov.w	r2, #4294967295
 80037d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037d4:	e008      	b.n	80037e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <prvResetNextTaskUnblockTime+0x38>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <prvResetNextTaskUnblockTime+0x3c>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20000c08 	.word	0x20000c08
 80037f8:	20000c70 	.word	0x20000c70

080037fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <xTaskGetSchedulerState+0x34>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800380a:	2301      	movs	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	e008      	b.n	8003822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <xTaskGetSchedulerState+0x38>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003818:	2302      	movs	r3, #2
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003822:	687b      	ldr	r3, [r7, #4]
	}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000c5c 	.word	0x20000c5c
 8003834:	20000c78 	.word	0x20000c78

08003838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d058      	beq.n	8003900 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800384e:	4b2f      	ldr	r3, [pc, #188]	@ (800390c <xTaskPriorityDisinherit+0xd4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d00b      	beq.n	8003870 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	60fb      	str	r3, [r7, #12]
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	60bb      	str	r3, [r7, #8]
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d02c      	beq.n	8003900 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d128      	bne.n	8003900 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fc54 	bl	8002160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <xTaskPriorityDisinherit+0xd8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d903      	bls.n	80038e0 <xTaskPriorityDisinherit+0xa8>
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003910 <xTaskPriorityDisinherit+0xd8>)
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4a09      	ldr	r2, [pc, #36]	@ (8003914 <xTaskPriorityDisinherit+0xdc>)
 80038ee:	441a      	add	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f7fe fbd5 	bl	80020a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003900:	697b      	ldr	r3, [r7, #20]
	}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000077c 	.word	0x2000077c
 8003910:	20000c58 	.word	0x20000c58
 8003914:	20000780 	.word	0x20000780

08003918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003922:	4b21      	ldr	r3, [pc, #132]	@ (80039a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003928:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <prvAddCurrentTaskToDelayedList+0x94>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3304      	adds	r3, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fc16 	bl	8002160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d10a      	bne.n	8003952 <prvAddCurrentTaskToDelayedList+0x3a>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <prvAddCurrentTaskToDelayedList+0x94>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4819      	ldr	r0, [pc, #100]	@ (80039b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800394c:	f7fe fbab 	bl	80020a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003950:	e026      	b.n	80039a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800395a:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <prvAddCurrentTaskToDelayedList+0x94>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	429a      	cmp	r2, r3
 8003968:	d209      	bcs.n	800397e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396a:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <prvAddCurrentTaskToDelayedList+0x94>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f7fe fbb9 	bl	80020ee <vListInsert>
}
 800397c:	e010      	b.n	80039a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800397e:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <prvAddCurrentTaskToDelayedList+0x94>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fe fbaf 	bl	80020ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d202      	bcs.n	80039a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800399a:	4a08      	ldr	r2, [pc, #32]	@ (80039bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000c54 	.word	0x20000c54
 80039ac:	2000077c 	.word	0x2000077c
 80039b0:	20000c3c 	.word	0x20000c3c
 80039b4:	20000c0c 	.word	0x20000c0c
 80039b8:	20000c08 	.word	0x20000c08
 80039bc:	20000c70 	.word	0x20000c70

080039c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039ca:	f000 fb13 	bl	8003ff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003a44 <xTimerCreateTimerTask+0x84>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039de:	1d3a      	adds	r2, r7, #4
 80039e0:	f107 0108 	add.w	r1, r7, #8
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fb15 	bl	8002018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	9202      	str	r2, [sp, #8]
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2302      	movs	r3, #2
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	460a      	mov	r2, r1
 8003a00:	4911      	ldr	r1, [pc, #68]	@ (8003a48 <xTimerCreateTimerTask+0x88>)
 8003a02:	4812      	ldr	r0, [pc, #72]	@ (8003a4c <xTimerCreateTimerTask+0x8c>)
 8003a04:	f7ff f8d0 	bl	8002ba8 <xTaskCreateStatic>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <xTimerCreateTimerTask+0x90>)
 8003a0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a0e:	4b10      	ldr	r3, [pc, #64]	@ (8003a50 <xTimerCreateTimerTask+0x90>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a16:	2301      	movs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	613b      	str	r3, [r7, #16]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a38:	697b      	ldr	r3, [r7, #20]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000cac 	.word	0x20000cac
 8003a48:	080049a8 	.word	0x080049a8
 8003a4c:	08003b8d 	.word	0x08003b8d
 8003a50:	20000cb0 	.word	0x20000cb0

08003a54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	@ 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <xTimerGenericCommand+0x30>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	623b      	str	r3, [r7, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a84:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <xTimerGenericCommand+0x98>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02a      	beq.n	8003ae2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	dc18      	bgt.n	8003ad0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a9e:	f7ff fead 	bl	80037fc <xTaskGetSchedulerState>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d109      	bne.n	8003abc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <xTimerGenericCommand+0x98>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	f107 0110 	add.w	r1, r7, #16
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab4:	f7fe fc88 	bl	80023c8 <xQueueGenericSend>
 8003ab8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003aba:	e012      	b.n	8003ae2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <xTimerGenericCommand+0x98>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	f107 0110 	add.w	r1, r7, #16
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f7fe fc7e 	bl	80023c8 <xQueueGenericSend>
 8003acc:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ace:	e008      	b.n	8003ae2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <xTimerGenericCommand+0x98>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f107 0110 	add.w	r1, r7, #16
 8003ad8:	2300      	movs	r3, #0
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	f7fe fd76 	bl	80025cc <xQueueGenericSendFromISR>
 8003ae0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3728      	adds	r7, #40	@ 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000cac 	.word	0x20000cac

08003af0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afa:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <prvProcessExpiredTimer+0x98>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fb29 	bl	8002160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d023      	beq.n	8003b64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	18d1      	adds	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f000 f8d5 	bl	8003cd8 <prvInsertTimerInActiveList>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff88 	bl	8003a54 <xTimerGenericCommand>
 8003b44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d114      	bne.n	8003b76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	60fb      	str	r3, [r7, #12]
}
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	e7fd      	b.n	8003b60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	4798      	blx	r3
}
 8003b7e:	bf00      	nop
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000ca4 	.word	0x20000ca4

08003b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b94:	f107 0308 	add.w	r3, r7, #8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f859 	bl	8003c50 <prvGetNextExpireTime>
 8003b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f805 	bl	8003bb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003baa:	f000 f8d7 	bl	8003d5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bae:	bf00      	nop
 8003bb0:	e7f0      	b.n	8003b94 <prvTimerTask+0x8>
	...

08003bb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bbe:	f7ff fa37 	bl	8003030 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bc2:	f107 0308 	add.w	r3, r7, #8
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f866 	bl	8003c98 <prvSampleTimeNow>
 8003bcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d130      	bne.n	8003c36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <prvProcessTimerOrBlockTask+0x3c>
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d806      	bhi.n	8003bf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003be2:	f7ff fa33 	bl	800304c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff81 	bl	8003af0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bee:	e024      	b.n	8003c3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bf6:	4b13      	ldr	r3, [pc, #76]	@ (8003c44 <prvProcessTimerOrBlockTask+0x90>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <prvProcessTimerOrBlockTask+0x50>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <prvProcessTimerOrBlockTask+0x52>
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <prvProcessTimerOrBlockTask+0x94>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	f7fe ff93 	bl	8002b40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c1a:	f7ff fa17 	bl	800304c <xTaskResumeAll>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c24:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <prvProcessTimerOrBlockTask+0x98>)
 8003c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	f3bf 8f6f 	isb	sy
}
 8003c34:	e001      	b.n	8003c3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c36:	f7ff fa09 	bl	800304c <xTaskResumeAll>
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000ca8 	.word	0x20000ca8
 8003c48:	20000cac 	.word	0x20000cac
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c58:	4b0e      	ldr	r3, [pc, #56]	@ (8003c94 <prvGetNextExpireTime+0x44>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <prvGetNextExpireTime+0x16>
 8003c62:	2201      	movs	r2, #1
 8003c64:	e000      	b.n	8003c68 <prvGetNextExpireTime+0x18>
 8003c66:	2200      	movs	r2, #0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c74:	4b07      	ldr	r3, [pc, #28]	@ (8003c94 <prvGetNextExpireTime+0x44>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e001      	b.n	8003c84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c84:	68fb      	ldr	r3, [r7, #12]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000ca4 	.word	0x20000ca4

08003c98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ca0:	f7ff fa72 	bl	8003188 <xTaskGetTickCount>
 8003ca4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <prvSampleTimeNow+0x3c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d205      	bcs.n	8003cbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cb0:	f000 f93a 	bl	8003f28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e002      	b.n	8003cc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cc2:	4a04      	ldr	r2, [pc, #16]	@ (8003cd4 <prvSampleTimeNow+0x3c>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000cb4 	.word	0x20000cb4

08003cd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d812      	bhi.n	8003d24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e01b      	b.n	8003d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <prvInsertTimerInActiveList+0x7c>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f7fe f9e6 	bl	80020ee <vListInsert>
 8003d22:	e012      	b.n	8003d4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d206      	bcs.n	8003d3a <prvInsertTimerInActiveList+0x62>
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e007      	b.n	8003d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <prvInsertTimerInActiveList+0x80>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7fe f9d2 	bl	80020ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d4a:	697b      	ldr	r3, [r7, #20]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000ca8 	.word	0x20000ca8
 8003d58:	20000ca4 	.word	0x20000ca4

08003d5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	@ 0x38
 8003d60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d62:	e0ce      	b.n	8003f02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da19      	bge.n	8003d9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	61fb      	str	r3, [r7, #28]
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	e7fd      	b.n	8003d8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d94:	6850      	ldr	r0, [r2, #4]
 8003d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d98:	6892      	ldr	r2, [r2, #8]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f2c0 80ae 	blt.w	8003f02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	3304      	adds	r3, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe f9d2 	bl	8002160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ff6a 	bl	8003c98 <prvSampleTimeNow>
 8003dc4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	f200 8097 	bhi.w	8003efc <prvProcessReceivedCommands+0x1a0>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <prvProcessReceivedCommands+0x78>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003dfd 	.word	0x08003dfd
 8003de0:	08003e73 	.word	0x08003e73
 8003de4:	08003e87 	.word	0x08003e87
 8003de8:	08003ed3 	.word	0x08003ed3
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003dfd 	.word	0x08003dfd
 8003df4:	08003e73 	.word	0x08003e73
 8003df8:	08003e87 	.word	0x08003e87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	18d1      	adds	r1, r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e1c:	f7ff ff5c 	bl	8003cd8 <prvInsertTimerInActiveList>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d06c      	beq.n	8003f00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d061      	beq.n	8003f00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	441a      	add	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e4e:	f7ff fe01 	bl	8003a54 <xTimerGenericCommand>
 8003e52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d152      	bne.n	8003f00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	61bb      	str	r3, [r7, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e84:	e03d      	b.n	8003f02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	617b      	str	r3, [r7, #20]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	18d1      	adds	r1, r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ecc:	f7ff ff04 	bl	8003cd8 <prvInsertTimerInActiveList>
					break;
 8003ed0:	e017      	b.n	8003f02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee2:	f000 fbe9 	bl	80046b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ee6:	e00c      	b.n	8003f02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003efa:	e002      	b.n	8003f02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <prvProcessReceivedCommands+0x1a6>
					break;
 8003f00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f02:	4b08      	ldr	r3, [pc, #32]	@ (8003f24 <prvProcessReceivedCommands+0x1c8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	1d39      	adds	r1, r7, #4
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fbfc 	bl	8002708 <xQueueReceive>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f47f af26 	bne.w	8003d64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3730      	adds	r7, #48	@ 0x30
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000cac 	.word	0x20000cac

08003f28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f2e:	e049      	b.n	8003fc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f30:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <prvSwitchTimerLists+0xc4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fec <prvSwitchTimerLists+0xc4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe f909 	bl	8002160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02f      	beq.n	8003fc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90e      	bls.n	8003f94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <prvSwitchTimerLists+0xc4>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe f8ae 	bl	80020ee <vListInsert>
 8003f92:	e017      	b.n	8003fc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f94:	2300      	movs	r3, #0
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fd58 	bl	8003a54 <xTimerGenericCommand>
 8003fa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	603b      	str	r3, [r7, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fc4:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <prvSwitchTimerLists+0xc4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1b0      	bne.n	8003f30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <prvSwitchTimerLists+0xc4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <prvSwitchTimerLists+0xc8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <prvSwitchTimerLists+0xc4>)
 8003fda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fdc:	4a04      	ldr	r2, [pc, #16]	@ (8003ff0 <prvSwitchTimerLists+0xc8>)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6013      	str	r3, [r2, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000ca4 	.word	0x20000ca4
 8003ff0:	20000ca8 	.word	0x20000ca8

08003ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ffa:	f000 f96d 	bl	80042d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <prvCheckForValidListAndQueue+0x60>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d120      	bne.n	8004048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004006:	4814      	ldr	r0, [pc, #80]	@ (8004058 <prvCheckForValidListAndQueue+0x64>)
 8004008:	f7fe f820 	bl	800204c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800400c:	4813      	ldr	r0, [pc, #76]	@ (800405c <prvCheckForValidListAndQueue+0x68>)
 800400e:	f7fe f81d 	bl	800204c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004012:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <prvCheckForValidListAndQueue+0x6c>)
 8004014:	4a10      	ldr	r2, [pc, #64]	@ (8004058 <prvCheckForValidListAndQueue+0x64>)
 8004016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004018:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <prvCheckForValidListAndQueue+0x70>)
 800401a:	4a10      	ldr	r2, [pc, #64]	@ (800405c <prvCheckForValidListAndQueue+0x68>)
 800401c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <prvCheckForValidListAndQueue+0x74>)
 8004024:	4a11      	ldr	r2, [pc, #68]	@ (800406c <prvCheckForValidListAndQueue+0x78>)
 8004026:	2110      	movs	r1, #16
 8004028:	200a      	movs	r0, #10
 800402a:	f7fe f92d 	bl	8002288 <xQueueGenericCreateStatic>
 800402e:	4603      	mov	r3, r0
 8004030:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <prvCheckForValidListAndQueue+0x60>)
 8004032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004034:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <prvCheckForValidListAndQueue+0x60>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800403c:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <prvCheckForValidListAndQueue+0x60>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	490b      	ldr	r1, [pc, #44]	@ (8004070 <prvCheckForValidListAndQueue+0x7c>)
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fd52 	bl	8002aec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004048:	f000 f978 	bl	800433c <vPortExitCritical>
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000cac 	.word	0x20000cac
 8004058:	20000c7c 	.word	0x20000c7c
 800405c:	20000c90 	.word	0x20000c90
 8004060:	20000ca4 	.word	0x20000ca4
 8004064:	20000ca8 	.word	0x20000ca8
 8004068:	20000d58 	.word	0x20000d58
 800406c:	20000cb8 	.word	0x20000cb8
 8004070:	080049b0 	.word	0x080049b0

08004074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b04      	subs	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800408c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b04      	subs	r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b04      	subs	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040a4:	4a0c      	ldr	r2, [pc, #48]	@ (80040d8 <pxPortInitialiseStack+0x64>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b14      	subs	r3, #20
 80040ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b04      	subs	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f06f 0202 	mvn.w	r2, #2
 80040c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b20      	subs	r3, #32
 80040c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	080040dd 	.word	0x080040dd

080040dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040e6:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <prvTaskExitError+0x58>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d00b      	beq.n	8004108 <prvTaskExitError+0x2c>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <prvTaskExitError+0x28>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60bb      	str	r3, [r7, #8]
}
 800411a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800411c:	bf00      	nop
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0fc      	beq.n	800411e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c
	...

08004140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004140:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <pxCurrentTCBConst2>)
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	6808      	ldr	r0, [r1, #0]
 8004146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	f380 8809 	msr	PSP, r0
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8811 	msr	BASEPRI, r0
 800415a:	4770      	bx	lr
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst2>:
 8004160:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004168:	4808      	ldr	r0, [pc, #32]	@ (800418c <prvPortStartFirstTask+0x24>)
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	6800      	ldr	r0, [r0, #0]
 800416e:	f380 8808 	msr	MSP, r0
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8814 	msr	CONTROL, r0
 800417a:	b662      	cpsie	i
 800417c:	b661      	cpsie	f
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	df00      	svc	0
 8004188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800418a:	bf00      	nop
 800418c:	e000ed08 	.word	0xe000ed08

08004190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004196:	4b47      	ldr	r3, [pc, #284]	@ (80042b4 <xPortStartScheduler+0x124>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a47      	ldr	r2, [pc, #284]	@ (80042b8 <xPortStartScheduler+0x128>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10b      	bne.n	80041b8 <xPortStartScheduler+0x28>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	613b      	str	r3, [r7, #16]
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	e7fd      	b.n	80041b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041b8:	4b3e      	ldr	r3, [pc, #248]	@ (80042b4 <xPortStartScheduler+0x124>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a3f      	ldr	r2, [pc, #252]	@ (80042bc <xPortStartScheduler+0x12c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10b      	bne.n	80041da <xPortStartScheduler+0x4a>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60fb      	str	r3, [r7, #12]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041da:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <xPortStartScheduler+0x130>)
 80041dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	22ff      	movs	r2, #255	@ 0xff
 80041ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <xPortStartScheduler+0x134>)
 8004200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004202:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <xPortStartScheduler+0x138>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004208:	e009      	b.n	800421e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800420a:	4b2f      	ldr	r3, [pc, #188]	@ (80042c8 <xPortStartScheduler+0x138>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	4a2d      	ldr	r2, [pc, #180]	@ (80042c8 <xPortStartScheduler+0x138>)
 8004212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b80      	cmp	r3, #128	@ 0x80
 8004228:	d0ef      	beq.n	800420a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800422a:	4b27      	ldr	r3, [pc, #156]	@ (80042c8 <xPortStartScheduler+0x138>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1c3 0307 	rsb	r3, r3, #7
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00b      	beq.n	800424e <xPortStartScheduler+0xbe>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60bb      	str	r3, [r7, #8]
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	e7fd      	b.n	800424a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800424e:	4b1e      	ldr	r3, [pc, #120]	@ (80042c8 <xPortStartScheduler+0x138>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	4a1c      	ldr	r2, [pc, #112]	@ (80042c8 <xPortStartScheduler+0x138>)
 8004256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <xPortStartScheduler+0x138>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004260:	4a19      	ldr	r2, [pc, #100]	@ (80042c8 <xPortStartScheduler+0x138>)
 8004262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800426c:	4b17      	ldr	r3, [pc, #92]	@ (80042cc <xPortStartScheduler+0x13c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <xPortStartScheduler+0x13c>)
 8004272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <xPortStartScheduler+0x13c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a13      	ldr	r2, [pc, #76]	@ (80042cc <xPortStartScheduler+0x13c>)
 800427e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004284:	f000 f8da 	bl	800443c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004288:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <xPortStartScheduler+0x140>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800428e:	f000 f8f9 	bl	8004484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004292:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <xPortStartScheduler+0x144>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0f      	ldr	r2, [pc, #60]	@ (80042d4 <xPortStartScheduler+0x144>)
 8004298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800429c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800429e:	f7ff ff63 	bl	8004168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042a2:	f7ff f83b 	bl	800331c <vTaskSwitchContext>
	prvTaskExitError();
 80042a6:	f7ff ff19 	bl	80040dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed00 	.word	0xe000ed00
 80042b8:	410fc271 	.word	0x410fc271
 80042bc:	410fc270 	.word	0x410fc270
 80042c0:	e000e400 	.word	0xe000e400
 80042c4:	20000da8 	.word	0x20000da8
 80042c8:	20000dac 	.word	0x20000dac
 80042cc:	e000ed20 	.word	0xe000ed20
 80042d0:	2000000c 	.word	0x2000000c
 80042d4:	e000ef34 	.word	0xe000ef34

080042d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
}
 80042f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042f2:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <vPortEnterCritical+0x5c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <vPortEnterCritical+0x5c>)
 80042fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <vPortEnterCritical+0x5c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d110      	bne.n	8004326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <vPortEnterCritical+0x60>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <vPortEnterCritical+0x4e>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	603b      	str	r3, [r7, #0]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <vPortEnterCritical+0x4a>
	}
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004342:	4b12      	ldr	r3, [pc, #72]	@ (800438c <vPortExitCritical+0x50>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <vPortExitCritical+0x26>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	607b      	str	r3, [r7, #4]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <vPortExitCritical+0x50>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a08      	ldr	r2, [pc, #32]	@ (800438c <vPortExitCritical+0x50>)
 800436a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800436c:	4b07      	ldr	r3, [pc, #28]	@ (800438c <vPortExitCritical+0x50>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <vPortExitCritical+0x44>
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	2000000c 	.word	0x2000000c

08004390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004390:	f3ef 8009 	mrs	r0, PSP
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4b15      	ldr	r3, [pc, #84]	@ (80043f0 <pxCurrentTCBConst>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f01e 0f10 	tst.w	lr, #16
 80043a0:	bf08      	it	eq
 80043a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043b4:	f380 8811 	msr	BASEPRI, r0
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f7fe ffac 	bl	800331c <vTaskSwitchContext>
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f380 8811 	msr	BASEPRI, r0
 80043cc:	bc09      	pop	{r0, r3}
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d6:	f01e 0f10 	tst.w	lr, #16
 80043da:	bf08      	it	eq
 80043dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043e0:	f380 8809 	msr	PSP, r0
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst>:
 80043f0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
}
 8004410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004412:	f7fe fec9 	bl	80031a8 <xTaskIncrementTick>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <xPortSysTickHandler+0x40>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f383 8811 	msr	BASEPRI, r3
}
 800442e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <vPortSetupTimerInterrupt+0x38>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <vPortSetupTimerInterrupt+0x3c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <vPortSetupTimerInterrupt+0x40>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <vPortSetupTimerInterrupt+0x44>)
 800445a:	3b01      	subs	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800445e:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e010 	.word	0xe000e010
 8004474:	e000e018 	.word	0xe000e018
 8004478:	20000000 	.word	0x20000000
 800447c:	10624dd3 	.word	0x10624dd3
 8004480:	e000e014 	.word	0xe000e014

08004484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004494 <vPortEnableVFP+0x10>
 8004488:	6801      	ldr	r1, [r0, #0]
 800448a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800448e:	6001      	str	r1, [r0, #0]
 8004490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004492:	bf00      	nop
 8004494:	e000ed88 	.word	0xe000ed88

08004498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800449e:	f3ef 8305 	mrs	r3, IPSR
 80044a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d915      	bls.n	80044d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <vPortValidateInterruptPriority+0x74>)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044b4:	4b16      	ldr	r3, [pc, #88]	@ (8004510 <vPortValidateInterruptPriority+0x78>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	7afa      	ldrb	r2, [r7, #11]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d20b      	bcs.n	80044d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <vPortValidateInterruptPriority+0x7c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044de:	4b0e      	ldr	r3, [pc, #56]	@ (8004518 <vPortValidateInterruptPriority+0x80>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d90b      	bls.n	80044fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	603b      	str	r3, [r7, #0]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <vPortValidateInterruptPriority+0x62>
	}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e3f0 	.word	0xe000e3f0
 8004510:	20000da8 	.word	0x20000da8
 8004514:	e000ed0c 	.word	0xe000ed0c
 8004518:	20000dac 	.word	0x20000dac

0800451c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004528:	f7fe fd82 	bl	8003030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800452c:	4b5c      	ldr	r3, [pc, #368]	@ (80046a0 <pvPortMalloc+0x184>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004534:	f000 f924 	bl	8004780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004538:	4b5a      	ldr	r3, [pc, #360]	@ (80046a4 <pvPortMalloc+0x188>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 8095 	bne.w	8004670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01e      	beq.n	800458a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800454c:	2208      	movs	r2, #8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	2b00      	cmp	r3, #0
 800455c:	d015      	beq.n	800458a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	3308      	adds	r3, #8
 8004566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <pvPortMalloc+0x6e>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	617b      	str	r3, [r7, #20]
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d06f      	beq.n	8004670 <pvPortMalloc+0x154>
 8004590:	4b45      	ldr	r3, [pc, #276]	@ (80046a8 <pvPortMalloc+0x18c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	d86a      	bhi.n	8004670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800459a:	4b44      	ldr	r3, [pc, #272]	@ (80046ac <pvPortMalloc+0x190>)
 800459c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800459e:	4b43      	ldr	r3, [pc, #268]	@ (80046ac <pvPortMalloc+0x190>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045a4:	e004      	b.n	80045b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d903      	bls.n	80045c2 <pvPortMalloc+0xa6>
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f1      	bne.n	80045a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045c2:	4b37      	ldr	r3, [pc, #220]	@ (80046a0 <pvPortMalloc+0x184>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d051      	beq.n	8004670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	4413      	add	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	1ad2      	subs	r2, r2, r3
 80045e6:	2308      	movs	r3, #8
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d920      	bls.n	8004630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <pvPortMalloc+0xfc>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462a:	69b8      	ldr	r0, [r7, #24]
 800462c:	f000 f90a 	bl	8004844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004630:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <pvPortMalloc+0x18c>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	4a1b      	ldr	r2, [pc, #108]	@ (80046a8 <pvPortMalloc+0x18c>)
 800463c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800463e:	4b1a      	ldr	r3, [pc, #104]	@ (80046a8 <pvPortMalloc+0x18c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <pvPortMalloc+0x194>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d203      	bcs.n	8004652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800464a:	4b17      	ldr	r3, [pc, #92]	@ (80046a8 <pvPortMalloc+0x18c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a18      	ldr	r2, [pc, #96]	@ (80046b0 <pvPortMalloc+0x194>)
 8004650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <pvPortMalloc+0x188>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	431a      	orrs	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004666:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <pvPortMalloc+0x198>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3301      	adds	r3, #1
 800466c:	4a11      	ldr	r2, [pc, #68]	@ (80046b4 <pvPortMalloc+0x198>)
 800466e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004670:	f7fe fcec 	bl	800304c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <pvPortMalloc+0x17a>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60fb      	str	r3, [r7, #12]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <pvPortMalloc+0x176>
	return pvReturn;
 8004696:	69fb      	ldr	r3, [r7, #28]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3728      	adds	r7, #40	@ 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200049b8 	.word	0x200049b8
 80046a4:	200049cc 	.word	0x200049cc
 80046a8:	200049bc 	.word	0x200049bc
 80046ac:	200049b0 	.word	0x200049b0
 80046b0:	200049c0 	.word	0x200049c0
 80046b4:	200049c4 	.word	0x200049c4

080046b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d04f      	beq.n	800476a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046ca:	2308      	movs	r3, #8
 80046cc:	425b      	negs	r3, r3
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <vPortFree+0xbc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <vPortFree+0x46>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60fb      	str	r3, [r7, #12]
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	e7fd      	b.n	80046fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <vPortFree+0x66>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60bb      	str	r3, [r7, #8]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <vPortFree+0xbc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01e      	beq.n	800476a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <vPortFree+0xbc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004744:	f7fe fc74 	bl	8003030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4b0a      	ldr	r3, [pc, #40]	@ (8004778 <vPortFree+0xc0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4413      	add	r3, r2
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <vPortFree+0xc0>)
 8004754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004756:	6938      	ldr	r0, [r7, #16]
 8004758:	f000 f874 	bl	8004844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800475c:	4b07      	ldr	r3, [pc, #28]	@ (800477c <vPortFree+0xc4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a06      	ldr	r2, [pc, #24]	@ (800477c <vPortFree+0xc4>)
 8004764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004766:	f7fe fc71 	bl	800304c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200049cc 	.word	0x200049cc
 8004778:	200049bc 	.word	0x200049bc
 800477c:	200049c8 	.word	0x200049c8

08004780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004786:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800478a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800478c:	4b27      	ldr	r3, [pc, #156]	@ (800482c <prvHeapInit+0xac>)
 800478e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3307      	adds	r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	4a1f      	ldr	r2, [pc, #124]	@ (800482c <prvHeapInit+0xac>)
 80047b0:	4413      	add	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <prvHeapInit+0xb0>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047be:	4b1c      	ldr	r3, [pc, #112]	@ (8004830 <prvHeapInit+0xb0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	4413      	add	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047cc:	2208      	movs	r2, #8
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <prvHeapInit+0xb4>)
 80047e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <prvHeapInit+0xb4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047ea:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <prvHeapInit+0xb4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <prvHeapInit+0xb4>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <prvHeapInit+0xb8>)
 800480e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a09      	ldr	r2, [pc, #36]	@ (800483c <prvHeapInit+0xbc>)
 8004816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004818:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <prvHeapInit+0xc0>)
 800481a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800481e:	601a      	str	r2, [r3, #0]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000db0 	.word	0x20000db0
 8004830:	200049b0 	.word	0x200049b0
 8004834:	200049b8 	.word	0x200049b8
 8004838:	200049c0 	.word	0x200049c0
 800483c:	200049bc 	.word	0x200049bc
 8004840:	200049cc 	.word	0x200049cc

08004844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800484c:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <prvInsertBlockIntoFreeList+0xac>)
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e002      	b.n	8004858 <prvInsertBlockIntoFreeList+0x14>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d8f7      	bhi.n	8004852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d108      	bne.n	8004886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	441a      	add	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	441a      	add	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d118      	bne.n	80048cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b15      	ldr	r3, [pc, #84]	@ (80048f4 <prvInsertBlockIntoFreeList+0xb0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d00d      	beq.n	80048c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e008      	b.n	80048d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048c2:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <prvInsertBlockIntoFreeList+0xb0>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e003      	b.n	80048d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d002      	beq.n	80048e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200049b0 	.word	0x200049b0
 80048f4:	200049b8 	.word	0x200049b8

080048f8 <memset>:
 80048f8:	4402      	add	r2, r0
 80048fa:	4603      	mov	r3, r0
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <memset+0xa>
 8004900:	4770      	bx	lr
 8004902:	f803 1b01 	strb.w	r1, [r3], #1
 8004906:	e7f9      	b.n	80048fc <memset+0x4>

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4d0d      	ldr	r5, [pc, #52]	@ (8004940 <__libc_init_array+0x38>)
 800490c:	4c0d      	ldr	r4, [pc, #52]	@ (8004944 <__libc_init_array+0x3c>)
 800490e:	1b64      	subs	r4, r4, r5
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	2600      	movs	r6, #0
 8004914:	42a6      	cmp	r6, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	4d0b      	ldr	r5, [pc, #44]	@ (8004948 <__libc_init_array+0x40>)
 800491a:	4c0c      	ldr	r4, [pc, #48]	@ (800494c <__libc_init_array+0x44>)
 800491c:	f000 f826 	bl	800496c <_init>
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	2600      	movs	r6, #0
 8004926:	42a6      	cmp	r6, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004930:	4798      	blx	r3
 8004932:	3601      	adds	r6, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f855 3b04 	ldr.w	r3, [r5], #4
 800493a:	4798      	blx	r3
 800493c:	3601      	adds	r6, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08004a20 	.word	0x08004a20
 8004944:	08004a20 	.word	0x08004a20
 8004948:	08004a20 	.word	0x08004a20
 800494c:	08004a24 	.word	0x08004a24

08004950 <memcpy>:
 8004950:	440a      	add	r2, r1
 8004952:	4291      	cmp	r1, r2
 8004954:	f100 33ff 	add.w	r3, r0, #4294967295
 8004958:	d100      	bne.n	800495c <memcpy+0xc>
 800495a:	4770      	bx	lr
 800495c:	b510      	push	{r4, lr}
 800495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004966:	4291      	cmp	r1, r2
 8004968:	d1f9      	bne.n	800495e <memcpy+0xe>
 800496a:	bd10      	pop	{r4, pc}

0800496c <_init>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr

08004978 <_fini>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr
